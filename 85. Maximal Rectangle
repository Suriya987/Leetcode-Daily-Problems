Source : Leetcode

Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.
Example 2:

Input: matrix = [["0"]]
Output: 0
Example 3:

Input: matrix = [["1"]]
Output: 1


Soln :

 #TimeComplexity :  O( N x (M + N) ) 

     N+M for iterating through the grid

     N for everytime we check the maxArea inside the loop 

 #SpaceComplexity : O(N)

class Solution {
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
        if (matrix.empty() || matrix[0].empty())
            return 0;

        int rows = matrix.size();
        int cols = matrix[0].size();
        vector<int> heights(cols + 1, 0);
        int maxArea = 0;

        for (const auto& row : matrix) {
            for (int i = 0; i < cols; i++) 
            {
                heights[i] = (row[i] == '1') ? heights[i] + 1 : 0;
            }

            
            stack<int> stk;
            for (int i = 0; i < heights.size(); i++) 
               {
                while (!stk.empty() && heights[i] < heights[stk.top()])
                  {
                    int h = heights[stk.top()];
                    stk.pop();
                    int w = stk.empty() ? i : i - stk.top() - 1;
                    maxArea = max(maxArea, h * w);
                }
                stk.push(i);
            }
        }

        return maxArea;
    }
};
