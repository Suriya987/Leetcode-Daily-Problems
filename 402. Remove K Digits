Source : Leetcode

Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.

Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.


Soln :

Time complexity : O(N)
Space Complexity : O(N)


class Solution {
 public:
  string removeKdigits(string num, int k) {
    
    // edge case
    if (num.length() == k)
      return "0";

    string ans;
    vector<char> vc;

    for (int i = 0; i < num.length(); i++) 
    {

      while (k > 0 && !vc.empty() && vc.back() > num[i]) {
        vc.pop_back();
        k--;
      }
      vc.push_back(num[i]);
    }

    while (k-- > 0)
      stack.pop_back();

    for (const char c : vc) {
      if (c == '0' && ans.empty())
        continue;
      ans += c;
    }

    return ans.empty() ? "0" : ans;
  }
};

// 1 4 3 2 2 1 9
