Given two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1.

Sort the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2. 
Elements that do not appear in arr2 should be placed at the end of arr1 in ascending order.

 

Example 1:

Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]
Output: [2,2,2,1,4,3,3,9,6,7,19]
Example 2:

Input: arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]
Output: [22,28,8,6,17,44]

Approach :  Brute force

Time complexity : O(N x M)
Space Complexity : O(M)

class Solution {
public:
    vector<int> relativeSortArray(vector<int>& arr1, vector<int>& arr2) {
       // vector<int> avail;
        vector<int> notAvail;

        vector<int> result;

        int len1=arr1.size();
        int len2=arr2.size();

     //pushing the values avail in the arr1
        for(int i=0;i<len2;i++)
        {
            for(int j=0;j<len1;j++)
            {
                if(arr2[i]==arr1[j]){
                result.push_back(arr1[j]);
                arr1[j]=-1;  //becoz we need to find the not avail so marking everything as -1
                }
            }
        }

         
            for(int j=0;j<len1;j++)
            {
                if(arr1[j]!=-1){
                notAvail.push_back(arr1[j]);
                arr1[j]=-1;  //becoz we need to find the not avail so marking everything as -1
                }
            }
        
        sort(notAvail.begin(),notAvail.end());

        for(int i=0;i<notAvail.size();i++)
        {
            result.push_back(notAvail[i]);
        }

        return result;

        
    }
};
