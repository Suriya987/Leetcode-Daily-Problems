Given an integer array nums that does not contain any zeros, find the largest positive integer k such that -k also exists in the array.

Return the positive integer k. If there is no such integer, return -1.

Example 1:

Input: nums = [-1,2,-3,3]
Output: 3
Explanation: 3 is the only valid k we can find in the array.
Example 2:

Input: nums = [-1,10,6,7,-7,1]
Output: 7
Explanation: Both 1 and 7 have their corresponding negative values in the array. 7 has a larger value.
Example 3:

Input: nums = [-10,8,6,7,-2,-3]
Output: -1
Explanation: There is no a single valid k, we return -1.

Time complexity : o(N LogN) 
Space Complexity : O(1)

class Solution {
public:
    int findMaxK(vector<int>& nums) {
         int len = nums.size();

         //find the max value in nums
         //and then check the negative of the greatest is exist or not
         
  
        //sorting

        sort(nums.begin(),nums.end());

        //two pointer approach
            int right=nums.size()-1;
            int left=0;
          while(left<right)
          {
             if(-(nums[left])==nums[right])
               return nums[right];
             else if(-(nums[left])<nums[right])
               right--;
             else 
                left++;
          }
          return -1;
    }
};
