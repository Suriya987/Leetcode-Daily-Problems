Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.
Example 1:
Input: nums = [3,2,3]
Output: [3]

Example 2:
Input: nums = [1]
Output: [1]

Example 3:
Input: nums = [1,2]
Output: [1,2]

1.Approach
   Using Extra space and Time Complexity 

 class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        unordered_map<int,int> mp;
        vector<int> res;
        int n=nums.size();
         for(int i=0;i<n;i++){
             mp[nums[i]]++;
         }
         
         for(int i=0;i<n;i++){
             if(mp[nums[i]]>n/3 && find(res.begin(),res.end(),nums[i])==res.end() ){
                 res.push_back(nums[i]);
             }
         }
         return res;
    }
};

Time and Space Complexity 
   Time =  O(N) -> for traversing and updating into mp data structure
           O(N) ->  finding the element in the vector 
  Overall, O(N) time complexty
Space = O(N) -> map data structure 
        O(N) -> using vector 
 Overall, O(2N).

here I  reduce the complexity which didnt need of use find func 

             if(mp[nums[i]]==0){
                 mp[nums[i]]++;
             }
             else{
                 mp[nums[i]]++;
                 nums.pop_back();
             }
         }
         int n1=n;  // this is to have the original size before we change into current size becoz we removed some repeating elements right..thats why
         n=nums.size();
         for(int i=0;i<n;i++){
             if(mp[nums[i]]>n1/3)
             {
                 res.push_back(nums[i]);
             }
         }
         return res;
    }
};
